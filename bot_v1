from bs4 import BeautifulSoup
import requests, re
import sqlite3, time
from sqlite3 import Error
import pandas as pd
from multiprocessing import Process, Manager
from threading import Thread, Timer, Event
import os, discord, asyncio

# return gallery name and post information
def check_gallery(gallery):
    global gall_dict

    # convert gallery from Eng to Kor & define minor variable
    if gallery in gall_dict.keys():
        minor = gall_dict[gallery][1]
        gallery = gall_dict[gallery][0]
    else: 
        msg = "갤러리 이름을 확인해주세요."
        return msg
    
    if minor == 0:
        url = 'http://gall.dcinside.com/board/lists/?id={}'.format(gallery)
    elif minor == 1:
        url = 'http://gall.dcinside.com/mgallery/board/lists/?id={}'.format(gallery)
    try:
        headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
        response = requests.get(url, headers = headers)
        html = response.text  # .text returns decoded string & .content returns bytes

        # create bs4 object using the html content
        soup = BeautifulSoup(html, 'html.parser')

        # gallery name
        gallery_name = soup.title.string
        # post information
        post_content = soup.find_all("tr", attrs={"class" : "ub-content us-post"})
        # define lists for post information
        list_number=[]; list_type=[]; list_title=[]; list_num_comment=[]; list_writer=[]; list_date=[]; list_view=[]; list_reco=[]
        # separate gallery with 말머리 and gallery without 말머리
        newline_count = post_content[0].text.count("\n")
        # gallery with 말머리
        if newline_count == 11:
            for i in post_content:
                post = i.text
                post_number = re.findall(r"^\n(.*?)\n", post)[0]
                list_number.append(int(post_number))
                post_type = re.findall(r"^\n.*?\n(.*?)\n", post)[0]
                list_type.append(post_type)
                post_title = re.findall(r"^\n.*?\n.*?\n\n(.*?)\n", post)[0]
                list_title.append(post_title)
                if re.findall(r"^\n.*?\n.*?\n\n.*?\n\[(.*?)\]", post):
                    post_num_comment = re.findall(r"^\n.*?\n.*?\n\n.*?\n\[(.*?)\]", post)[0]
                    list_num_comment.append(post_num_comment)
                else:
                    post_num_comment = 0
                    list_num_comment.append(post_num_comment)
                post_writer = re.findall(r"^\n.*?\n.*?\n\n.*?\n.*?\n\n(.*?)\n", post)[0]
                list_writer.append(post_writer)
                post_date = re.findall(r"^\n.*?\n.*?\n\n.*?\n.*?\n\n.*?\n(.*?)\n", post)[0]
                list_date.append(post_date)
                post_view = re.findall(r"^\n.*?\n.*?\n\n.*?\n.*?\n\n.*?\n.*?\n(.*?)\n", post)[0]
                list_view.append(post_view)
                post_reco = re.findall(r"^\n.*?\n.*?\n\n.*?\n.*?\n\n.*?\n.*?\n.*?\n(.*?)\n", post)[0]
                list_reco.append(post_reco)
   
            return gallery_name, list_number, list_type, list_title, list_num_comment, list_writer, list_date, list_view, list_reco

        elif newline_count == 10:
            for i in post_content:
                post = i.text
                post_number = re.findall(r"^\n(.*?)\n", post)[0]
                if post_number.isdigit():
                    list_number.append(int(post_number))
                    post_type = ""
                else:
                    list_number.append(0)
                    post_type = "공지"
                list_type.append(post_type)
                post_title = re.findall(r"^\n.*?\n\n(.*?)\n", post)[0]
                list_title.append(post_title)
                if re.findall(r"^\n.*?\n\n.*?\n\[(.*?)\]", post):
                    post_num_comment = re.findall(r"^\n.*?\n\n.*?\n\[(.*?)\]", post)[0]
                    list_num_comment.append(post_num_comment)
                else:
                    post_num_comment = 0
                    list_num_comment.append(post_num_comment)
                post_writer = re.findall(r"^\n.*?\n\n.*?\n.*?\n\n(.*?)\n", post)[0]
                list_writer.append(post_writer)
                post_date = re.findall(r"^\n.*?\n\n.*?\n.*?\n\n.*?\n(.*?)\n", post)[0]
                list_date.append(post_date)
                post_view = re.findall(r"^\n.*?\n\n.*?\n.*?\n\n.*?\n.*?\n(.*?)\n", post)[0]
                list_view.append(post_view)
                post_reco = re.findall(r"^\n.*?\n\n.*?\n.*?\n\n.*?\n.*?\n.*?\n(.*?)\n", post)[0]
                list_reco.append(post_reco)
   
            return gallery_name, list_number, list_type, list_title, list_num_comment, list_writer, list_date, list_view, list_reco
    except:
        print("Error: 갤러리이름과 마이너 변수를 확인해주세요.")

def create_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        return conn
    except:
        print("Error: 데이터베이스 연결을 확인해주세요.")
    return conn

def create_table_sql(gallery_name):
    sql = """ CREATE TABLE IF NOT EXISTS {} (
                id integer PRIMARY KEY,
                post_number text,
                post_type text,
                post_title text,
                post_num_comment text,
                post_writer text,
                post_date text,
                post_view text,
                post_reco text
                ); """.format(gallery_name)
    return sql

def create_table_sql2(gallery_name):
    sql = """ CREATE TABLE IF NOT EXISTS {} (
                id integer PRIMARY KEY,
                post_title text,
                post_writer text,
                post_date text
                ); """.format(gallery_name)
    return sql

def create_table(conn, script):
    try:
        cur = conn.cursor()
        cur.execute(script)
        conn.commit()
    except:
        print("Error: 데이터베이스 연결을 확인해주세요.")

def create_instance(conn, gallery_name, instance_attrs):
    sql = '''INSERT INTO {}(post_number,post_type,post_title,post_num_comment,post_writer,post_date,post_view,post_reco)
            VALUES(?,?,?,?,?,?,?,?)'''.format(gallery_name)
    cur = conn.cursor()
    cur.execute(sql, instance_attrs)
    conn.commit()
    return cur.lastrowid

def create_instance2(conn, gallery_name, instance_attrs):
    sql = '''INSERT INTO {}(post_title,post_writer,post_date)
            VALUES(?,?,?)'''.format(gallery_name)
    cur = conn.cursor()
    cur.execute(sql, instance_attrs)
    conn.commit()
    return cur.lastrowid

def delete_instance(conn, gallery_name):
    sql = 'DELETE FROM {}'.format(gallery_name)
    cur = conn.cursor()
    cur.execute(sql)
    conn.commit()

def show_gallery_list(conn):
    cur = conn.cursor()
    cur.execute('SELECT name from sqlite_master where type= "table"')
    gall_list = cur.fetchall()
    return gall_list

def drop_all(conn):
    cur = conn.cursor()
    cur.execute('SELECT name from sqlite_master where type= "table"')
    gall_list = cur.fetchall()
    for gall in gall_list:
        script = "DROP TABLE " + gall[0]
        cur.execute(script)

def add_gallery(gallery_name_Kor):
    global gallery_list
    gallery_list.append(gallery_name_Kor)

def remove_gallery(gallery_name_Kor):
    global gallery_list
    gallery_list.remove(gallery_name_Kor)

def new_content(gallery_name_Kor):
    global conn
    # web-crawl gallery
    """gallery contains gallery_name and lists of post_number, post_type, post_title,
                                                  post_num_comment,post_writer,post_date,
                                                  post_view,post_reco"""
    gallery = check_gallery(gallery_name_Kor)

    if gallery == "갤러리 이름을 확인해주세요.":
        msg = "갤러리 이름을 확인해주세요."
        return msg

    create_table(conn, create_table_sql(gallery_name_Kor))

    # load table
    df1 = pd.read_sql_query("SELECT * from {}".format(gallery_name_Kor), conn)
    df1.drop("id", axis=1, inplace=True)

    # delete old instances
    delete_instance(conn, gallery_name_Kor)

    # update table
    for i in range(len(gallery[1])):
            script = (gallery[1][i],gallery[2][i],gallery[3][i],gallery[4][i],gallery[5][i],gallery[6][i],gallery[7][i],gallery[8][i])
            create_instance(conn, gallery_name_Kor, script)
            i += 1

    # return new content
    df2 = pd.read_sql_query("SELECT * from {}".format(gallery_name_Kor), conn)
    df2.drop("id", axis=1, inplace=True)
    df3 = pd.concat([df1,df2])
    df3 = df3.drop_duplicates(subset=["post_number"], keep=False)
    df3_announce = df3.loc[df3.post_type == "공지"]
    df3_content = df3.loc[df3.post_type != "공지"]
    df3_content = df3_content.sort_values(by=["post_number"], ascending=False)
    df3 = pd.concat([df3_announce, df3_content])
    if df1.empty == 0:
        df3 = df3.loc[df3.post_number > max(df1.post_number.tolist())]
    df3 = df3.loc[:,["post_title","post_writer","post_date"]]
    df3.style.set_properties(**{'text-align': 'left'})
    if df3.empty:
        df3 = ""
    
    return gallery_name_Kor, df3

def crawl(gallery_list):
    global conn, first, content
    
    # connect to database
    conn = create_connection("./DC_Gall.db")

    # drop all tables if first run
    if first == 1:
        drop_all(conn)
        first = 0

    # execute sql commands
    if conn is not None:
        if len(gallery_list) == 0:
            return
        for gall in gallery_list:
            content = new_content(gall)
            gall_table = content[0] + "_"
            create_table(conn, create_table_sql2(gall_table))
            ###
            print(gall)
            print(content[0])
            print(content[1])
            ###
            if content[1] == "":
                pass
            else:
                for i in range(content[1].shape[0]):
                    script = (content[1].iloc[i,0], content[1].iloc[i,1], content[1].iloc[i,2])
                    create_instance2(conn, gall_table, script)
            
    else:
        print("Error: 데이터베이스 연결을 확인해주세요.")

    # close connection
    conn.close()

class MyThread(Thread):
    def __init__(self, event, gallery_list):
        Thread.__init__(self)
        self.stopped = event
        self.gallery_list = gallery_list

    def run(self):
        while not self.stopped.wait(10):
            crawl(self.gallery_list)

client = discord.Client()

@client.event
async def on_ready():
    for guild in client.guilds:
        print(f'{guild} 서버와 연결되었습니다.')

@client.event
async def on_message(message):
    global gall_dict, minor_dict, gallery_list, start
    if message.author == client.user:
        return

    if message.content == '!리스트':
        if len(gallery_list) == 0:
            msg = "등록된 갤러리가 없습니다."
            await message.channel.send(msg)
        else:
            msg = str(gallery_list)
            msg = msg.replace('[','').replace(']','').replace("'",'')
            await message.channel.send(msg)        

    if '!추가' in message.content:
        try:
            gallery = re.findall(r'!추가\s(.*?)$',message.content)
            gallery = gallery[0]
            try:
                if gallery not in gall_dict:
                    msg = "갤러리 이름을 확인해주세요."
                    await message.channel.send(msg)
                    return
                add_gallery(gallery)
            except:
                msg = "갤러리 이름을 확인해주세요."
                await message.channel.send(msg)
                return
            msg = f"{gallery} 갤러리가 추가되었습니다."
            await message.channel.send(msg)
        except:
            msg = '추가하실 갤러리를 입력해주세요. 예) !추가 HIT'
            await message.channel.send(msg)

    if '!삭제' in message.content:
        try:
            gallery = re.findall(r'!삭제\s(.*?)$',message.content)
            gallery = gallery[0]
            try:
                if gallery not in gall_dict:
                    msg = "갤러리 이름을 확인해주세요."
                    await message.channel.send(msg)
                    return
                remove_gallery(gallery)
            except:
                msg = "갤러리 이름을 확인해주세요."
                await message.channel.send(msg)
                return
            msg = f"{gallery} 갤러리가 삭제되었습니다."
            await message.channel.send(msg)
        except:
            msg = '삭제하실 갤러리를 입력해주세요. 예) !삭제 HIT'
            await message.channel.send(msg)

    if message.content == '!시작':
        start = 1
        while start == 1:
            if len(gallery_list) == 0:
                pass
            else:
                try:
                    conn = create_connection("./DC_Gall.db")
                    for gall in gallery_list:
                        gall_table = gall + "_"
                        df = pd.read_sql_query("SELECT * from {}".format(gall_table), conn)
                        if df.size == 0:
                            pass
                        else:
                            msg1 = gall
                            await message.channel.send(msg1)
                            for i in range(df.shape[0]):
                                msg2 = "제목: {} 글쓴이: {} 날짜: {}".format(df.iloc[1,0],df.iloc[1,1],df.iloc[1,2])
                                await message.channel.send(msg2)   
                    conn.close()
                except:
                    pass
            await asyncio.sleep(5)
        
    if message.content == '!중지':
        start = 0 

if __name__ == "__main__":
    # define global variables
    first = 1
    start = 1
    gall_dict = {}
    gall_dict['다크에덴'] = ('darkeden',1)
    gall_dict['주식'] = ('stock_new2',0)
    
    # define gallery_list
    gallery_list = Manager().list()
    gallery_list = []

    # define perpetual web crawler
    stopFlag = Event()
    thread = MyThread(stopFlag, gallery_list)
    thread.start()

    # define discord bot token
    token = 'NjU4NjgxOTU0MjQxMDg1NDYw.XgDUEg.HZK8ogr0tCk3pY9qo-u99ZG0a4g'
    # token = input('봇 토큰을 입력해주세요: ')
    
    # run bot
    client.run(token)

